(ns nnet.examples.calc-dig
  (:require [nnet.data-structures :refer :all]
            [clojure.core.matrix :as m]))

(def training-set-calc-dig [(->TrainingExample [[0.5 0.5 0.5, 0.5 -0.5 0.5, 0.5 -0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, 1.0]] [[0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5]]) ; 0
                            (->TrainingExample [[-0.5 0.5 -0.5, 0.5 0.5 -0.5, -0.5 0.5 -0.5, -0.5 0.5 -0.5, 0.5 0.5 0.5, 1.0]] [[-0.5 0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5]]) ; 1
                            (->TrainingExample [[0.5 0.5 0.5, -0.5 -0.5 0.5, 0.5 0.5 0.5, 0.5 -0.5 -0.5, 0.5 0.5 0.5, 1.0]] [[-0.5 -0.5 0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5]]) ; 2
                            (->TrainingExample [[0.5 0.5 0.5, -0.5 -0.5 0.5, 0.5 0.5 0.5, -0.5 -0.5 0.5, 0.5 0.5 0.5, 1.0]] [[-0.5 -0.5 -0.5 0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5]]) ; 3
                            (->TrainingExample [[0.5 -0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, -0.5 -0.5 0.5, -0.5 -0.5 0.5, 1.0]] [[-0.5 -0.5 -0.5 -0.5 0.5 -0.5 -0.5 -0.5 -0.5 -0.5]]) ; 4
                            (->TrainingExample [[0.5 0.5 0.5, 0.5 -0.5 -0.5, 0.5 0.5 0.5, -0.5 -0.5 0.5, 0.5 0.5 0.5, 1.0]] [[-0.5 -0.5 -0.5 -0.5 -0.5 0.5 -0.5 -0.5 -0.5 -0.5]]) ; 5
                            (->TrainingExample [[0.5 0.5 0.5, 0.5 -0.5 -0.5, 0.5 0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, 1.0]] [[-0.5 -0.5 -0.5 -0.5 -0.5 -0.5 0.5 -0.5 -0.5 -0.5]]) ; 6
                            (->TrainingExample [[0.5 0.5 0.5, -0.5 -0.5 0.5, -0.5 0.5 -0.5, -0.5 0.5 -0.5, -0.5 0.5 -0.5, 1.0]] [[-0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 0.5 -0.5 -0.5]]) ; 7
                            (->TrainingExample [[0.5 0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, 1.0]] [[-0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 0.5 -0.5]]) ; 8
                            (->TrainingExample [[0.5 0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, -0.5 -0.5 0.5, -0.5 -0.5 0.5, 1.0]] [[-0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 0.5]]) ; 9
                            ])


(def output-mean-vector [[0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]])

(defn response-interpretation
  [output-vector]
  (let [mean-added (m/add output-vector output-mean-vector)]
    mean-added))
